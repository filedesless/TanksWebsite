{"version":3,"sources":["logo.svg","TreasuryLog.tsx","Clock.tsx","Coins.ts","Stash.tsx","globals.ts","utils.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Operation","Clock","props","timerID","state","date","Date","this","setInterval","setState","clearInterval","toLocaleTimeString","React","Component","Coins","coins","gold","silver","copper","toString","Math","floor","Stash","chests","fetch","then","res","json","stashes","console","log","map","stash","id","upgrade_id","name","note","chest","key","API_KEY","hide_user_digits","username","split","slice","join","getContributors","logs","m","Map","forEach","operation","Deposit","set","user","get","Withdraw","ret","value","push","sort","a","b","load_data","filter","entry","type","TreasuryLogs","contributors","length","src","logo","className","alt","word","time","toLocaleString","log2line","contributor","App","Tabs","defaultActiveKey","Tab","eventKey","title","TreasuryLog","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.51c7d08d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport Coins from './Coins';\nimport { API_URL, API_KEY, GUILD_ID } from './globals';\nimport { hide_user_digits } from './utils';\n\ninterface ApiResponse {\n    id: number\n    time: Date\n    user: string\n    type: string\n}\n\nenum Operation {\n    Deposit = \"deposit\",\n    Withdraw = \"withdraw\"\n}\n\ninterface StashApiResponse extends ApiResponse {\n    coins: number\n    operation: Operation\n}\n\ntype TreasuryLogsState = {\n    logs: Array<StashApiResponse>,\n    contributors: Contributor[],\n}\n\ntype Contributor = {\n    username: string,\n    coins: number\n}\n\nfunction getContributors(logs: StashApiResponse[]): Contributor[] {\n    const m: Map<string, number> = new Map();\n    logs.forEach(log => {\n        switch (log.operation) {\n            case Operation.Deposit:\n                m.set(log.user, (m.get(log.user) || 0) + log.coins);\n                break;\n            case Operation.Withdraw:\n                m.set(log.user, (m.get(log.user) || 0) - log.coins);\n                break;\n        }\n    });\n\n    const ret: Contributor[] = [];\n    m.forEach((value, key) => {\n        ret.push({ username: key, coins: value });\n    });\n\n    ret.sort((a, b) => a.coins < b.coins ? 1 : -1);\n\n    return ret;\n}\n\nfunction top_contributor(list: Contributor[]): Contributor {\n    return list.reduce((acc, cur) => acc.coins < cur.coins ? cur : acc);\n}\n\nasync function load_data(): Promise<StashApiResponse[]> {\n    return fetch(`${API_URL}/guild/${GUILD_ID}/log?access_token=${API_KEY}`)\n        .then(res => res.json())\n        .then(res =>\n            res.filter((entry: ApiResponse) =>\n                entry.type === \"stash\"))\n        .then(res =>\n            res.filter((entry: StashApiResponse) =>\n                entry.operation === Operation.Deposit ||\n                entry.operation === Operation.Withdraw))\n        .then(res =>\n            res.filter((entry: StashApiResponse) => entry.coins !== 0))\n        .then(res =>\n            res.map((entry: StashApiResponse) => {\n                entry.user = hide_user_digits(entry.user);\n                return entry;\n            }));\n}\n\nfunction log2line(log: StashApiResponse) {\n    const word = log.operation === Operation.Deposit ? \"deposited\" : \"withdrawed\";\n    const time = new Date(log.time).toLocaleString();\n    return `${time} - ${log.user} ${word} ${new Coins(log.coins).toString()}`;\n}\n\nfunction contributor2line(contributor: Contributor) {\n    return `${contributor.username}: ${new Coins(contributor.coins).toString()}`;\n}\n\nclass TreasuryLogs extends React.Component {\n    state: TreasuryLogsState;\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            logs: [],\n            contributors: [],\n        };\n    }\n\n    async componentDidMount() {\n        const logs = await load_data();\n        const contributors = getContributors(logs);\n        this.setState({ logs, contributors });\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>Treasury access logs</h2>\n                {\n                    this.state.logs.length === 0 ?\n                        <img src={logo} className=\"App-logo\" alt=\"logo\" /> :\n                        <ul>\n                            {this.state.logs.map((log) =>\n                                <li key={log.id}>{log2line(log)}</li>\n                            )}\n                        </ul>\n                }\n                <h3>Scoreboard</h3>\n                <ul>\n                    {this.state.contributors.map((log) =>\n                        <li key={log.username}>{contributor2line(log)}</li>)}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default TreasuryLogs;\n","import React from 'react';\n\ninterface IProps {\n}\n\ninterface IState {\n    date: Date;\n}\n\nclass Clock extends React.Component<IProps, IState> {\n    timerID?: any;\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = { date: new Date() };\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.setState({ date: new Date() }),\n            1000\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Hello world</h1>\n                <h3>{this.state.date.toLocaleTimeString()}</h3>\n            </div>\n        );\n    }\n}\n\nexport default Clock;\n","export default class Coins {\n    gold: number\n    silver: number\n    copper: number\n\n    constructor(coins: number) {\n        this.gold = Math.floor(coins / 10000);\n        this.silver = Math.floor(coins / 100 % 100);\n        this.copper = coins % 100;\n    }\n\n    toString = (): string => `${this.gold}g ${this.silver}s ${this.copper}c`\n}\n","import React from 'react';\nimport Coins from './Coins';\n\nconst API_URL = \"https://api.guildwars2.com/v2\";\nconst API_KEY = \"80C77C67-C099-6247-B918-E1923A826C088E44B09F-C6A8-4F6F-95DC-6997446B06F6\";\nconst GUILD_ID = \"7311D77B-E708-EA11-81AA-A77AA130EAB8\";\n\ntype ApiResponse = {\n    upgrade_id: number,\n    size: number,\n    coins: number,\n    note: string,\n}\n\ntype Chest = {\n    id: number,\n    coins: Coins,\n    name: string,\n}\n\ntype StashState = {\n    chests: Array<Chest>,\n}\n\nclass Stash extends React.Component {\n    state: StashState;\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            chests: []\n        };\n    }\n\n    componentDidMount() {\n        fetch(`${API_URL}/guild/${GUILD_ID}/stash?access_token=${API_KEY}`)\n            .then(res => res.json())\n            .then((stashes: ApiResponse[]) => {\n                console.log(stashes);\n                const chests: Chest[] = stashes.map(stash => ({\n                    id: stash.upgrade_id,\n                    coins: new Coins(stash.coins),\n                    name: stash.note,\n                }));\n                this.setState({ chests });\n            });\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>Guild chest list</h2>\n                <ul>\n                    {this.state.chests.map((chest) => (\n                        <li key={chest.id}>{chest.name}: {chest.coins.toString()}</li>\n                    ))}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default Stash;\n","export const API_URL = \"https://api.guildwars2.com/v2\";\nexport const API_KEY = \"80C77C67-C099-6247-B918-E1923A826C088E44B09F-C6A8-4F6F-95DC-6997446B06F6\";\nexport const GUILD_ID = \"7311D77B-E708-EA11-81AA-A77AA130EAB8\";\n","export function hide_user_digits(username: string): string {\n    return username.split('.').slice(0, -1).join('');\n}\n","import React from 'react';\nimport './App.css';\nimport Clock from './Clock';\nimport Stash from './Stash';\nimport TreasuryLog from './TreasuryLog';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Tabs id=\"main\" defaultActiveKey=\"clock\">\n                    <Tab id=\"tab-clock\" eventKey=\"clock\" title=\"Clock\">\n                        <Clock />\n                    </Tab>\n                    <Tab id=\"tab-stash\" eventKey=\"stash\" title=\"Stash\">\n                        <Stash />\n                    </Tab>\n                    <Tab id=\"tab-treasury\" eventKey=\"treasury\" title=\"TreasuryLog\">\n                        <TreasuryLog />\n                    </Tab>\n                </Tabs>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}